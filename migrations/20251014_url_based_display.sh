#!/bin/bash
#
# Migration: 20251014_url_based_display.sh
# Description: Transition from Node.js app to URL-based display service
#
# This migration:
# - Prompts for display token
# - Stops and removes kioskbook-app service
# - Creates /etc/kioskbook/display.conf
# - Cleans up old application directory
#

set -euo pipefail

# Source common functions if available
if [[ -f "$(dirname "$0")/../lib/common.sh" ]]; then
    source "$(dirname "$0")/../lib/common.sh"
fi

MIGRATION_NAME="20251014_url_based_display"
CONFIG_FILE="/etc/kioskbook/display.conf"
APP_DIR="/opt/kioskbook"
SERVICE_FILE="/etc/systemd/system/kioskbook-app.service"

log_migration "$MIGRATION_NAME" "Starting migration to URL-based display..."

# Prompt for display token
echo ""
echo "═══════════════════════════════════════════════════════"
echo "  KioskBook Migration: URL-Based Display"
echo "═══════════════════════════════════════════════════════"
echo ""
echo "This migration transitions from a local Node.js application"
echo "to an external URL-based display service."
echo ""
echo -n "Enter display authorization token: "
read -r DISPLAY_TOKEN
echo ""

if [[ -z "$DISPLAY_TOKEN" ]]; then
    log_migration "$MIGRATION_NAME" "ERROR: Display token is required for migration"
    exit 1
fi

DISPLAY_URL="https://kioskbook.ca/display"

# Stop and disable old application service
if systemctl is-active --quiet kioskbook-app.service 2>/dev/null; then
    log_migration "$MIGRATION_NAME" "Stopping kioskbook-app service..."
    systemctl stop kioskbook-app.service
fi

if systemctl is-enabled --quiet kioskbook-app.service 2>/dev/null; then
    log_migration "$MIGRATION_NAME" "Disabling kioskbook-app service..."
    systemctl disable kioskbook-app.service
fi

# Remove service file
if [[ -f "$SERVICE_FILE" ]]; then
    log_migration "$MIGRATION_NAME" "Removing kioskbook-app service file..."
    rm -f "$SERVICE_FILE"
    systemctl daemon-reload
fi

# Create display configuration
log_migration "$MIGRATION_NAME" "Creating display configuration at $CONFIG_FILE..."
mkdir -p "$(dirname "$CONFIG_FILE")"
cat > "$CONFIG_FILE" <<EOF
# KioskBook Display Configuration
# Generated by migration on $(date)
DISPLAY_URL="$DISPLAY_URL"
DISPLAY_TOKEN="$DISPLAY_TOKEN"
EOF
chmod 644 "$CONFIG_FILE"

log_migration "$MIGRATION_NAME" "Display URL configured: $DISPLAY_URL"

# Clean up old application directory (optional - keep for safety)
if [[ -d "$APP_DIR" ]]; then
    log_migration "$MIGRATION_NAME" "Old application directory found at $APP_DIR"
    echo -n "Remove old application directory? (y/N): "
    read -r REMOVE_APP
    if [[ "$REMOVE_APP" =~ ^[Yy]$ ]]; then
        log_migration "$MIGRATION_NAME" "Removing $APP_DIR..."
        rm -rf "$APP_DIR"
    else
        log_migration "$MIGRATION_NAME" "Keeping $APP_DIR (can be manually removed later)"
    fi
fi

# Note about Node.js
if command -v node >/dev/null 2>&1; then
    log_migration "$MIGRATION_NAME" "Node.js is still installed ($(node --version))"
    log_migration "$MIGRATION_NAME" "You can remove it manually if no longer needed:"
    log_migration "$MIGRATION_NAME" "  apt-get remove --purge nodejs"
    log_migration "$MIGRATION_NAME" "  apt-get autoremove"
fi

log_migration "$MIGRATION_NAME" "Migration completed successfully!"
echo ""
echo "Next steps:"
echo "  1. Run: kiosk update all"
echo "  2. Reboot or restart display: kiosk restart display"
echo ""
