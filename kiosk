#!/bin/bash
#
# KioskBook Management CLI
# 
# Unified command-line interface for managing KioskBook kiosk systems.
# Follows Debian conventions for system management tools.
#
# Usage: kiosk <command> [options]
#

set -euo pipefail

# Colors for output
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly CYAN='\033[0;36m'
readonly NC='\033[0m'

# Configuration
readonly KIOSK_USER="kiosk"
readonly APP_DIR="/opt/kioskbook"
readonly LOG_DIR="/var/log/kioskbook"
readonly CONFIG_DIR="/etc/kioskbook"

# Logging functions
log() { printf "${CYAN}[KIOSK]${NC} %s\n" "$1"; }
log_success() { printf "${GREEN}[SUCCESS]${NC} %s\n" "$1"; }
log_warning() { printf "${YELLOW}[WARNING]${NC} %s\n" "$1"; }
log_error() { printf "${RED}[ERROR]${NC} %s\n" "$1"; }

# Check if running as root
require_root() {
    if [[ $EUID -ne 0 ]]; then
        log_error "This command requires root privileges. Use: sudo kiosk $*"
        exit 1
    fi
}

# Show help
show_help() {
    cat << 'EOF'
KioskBook Management CLI

USAGE:
    kiosk <command> [options]

COMMANDS:
    status          Show system status and health
    start           Start kiosk services
    stop            Stop kiosk services  
    restart         Restart kiosk services
    reboot          Reboot system safely
    logs            Show application logs
    health          Run comprehensive health check
    update          Update Vue.js application only
    upgrade         Upgrade entire KioskBook system
    maintenance     Run maintenance tasks
    schedule        Manage scheduled tasks
    monitor         Show real-time monitoring
    config          Show/edit configuration
    backup          Backup system configuration
    restore         Restore from backup

EXAMPLES:
    kiosk status              # Show current status
    kiosk logs -f             # Follow logs in real-time
    kiosk update              # Update Vue.js app only
    kiosk upgrade             # Upgrade entire system
    kiosk health --detailed   # Detailed health report
    kiosk schedule --list     # Show scheduled tasks

For detailed help on a command: kiosk <command> --help
EOF
}

# Show system status
cmd_status() {
    echo -e "${CYAN}═══ KioskBook System Status ═══${NC}\n"
    
    # System info
    echo -e "${CYAN}System:${NC}"
    echo "  Hostname: $(hostname)"
    echo "  Uptime: $(uptime -p)"
    echo "  Load: $(cat /proc/loadavg | awk '{print $1" "$2" "$3}')"
    echo "  Memory: $(free -h | awk '/^Mem:/ {print $3"/"$2}') ($(free | awk '/^Mem:/ {printf "%.1f%%", ($3/$2)*100}'))"
    echo "  Disk: $(df -h / | awk 'NR==2 {print $3"/"$2" ("$5")"}')"
    echo
    
    # Services status
    echo -e "${CYAN}Services:${NC}"
    for service in kioskbook-app lightdm ssh; do
        if systemctl is-active --quiet "$service" 2>/dev/null; then
            echo -e "  ✅ $service: ${GREEN}active${NC}"
        else
            echo -e "  ❌ $service: ${RED}inactive${NC}"
        fi
    done
    echo
    
    # Display status
    echo -e "${CYAN}Display:${NC}"
    if pgrep -f "chromium.*kiosk" >/dev/null; then
        echo -e "  ✅ Chromium kiosk: ${GREEN}running${NC}"
    else
        echo -e "  ❌ Chromium kiosk: ${RED}not running${NC}"
    fi
    
    if pgrep -f "openbox" >/dev/null; then
        echo -e "  ✅ Window manager: ${GREEN}running${NC}"
    else
        echo -e "  ❌ Window manager: ${RED}not running${NC}"
    fi
    echo
    
    # Network status
    echo -e "${CYAN}Network:${NC}"
    if ping -c 1 -W 3 google.com >/dev/null 2>&1; then
        echo -e "  ✅ Internet: ${GREEN}connected${NC}"
    else
        echo -e "  ❌ Internet: ${RED}disconnected${NC}"
    fi
    
    # Application status
    echo -e "${CYAN}Application:${NC}"
    if curl -s --max-time 3 http://localhost:5173 >/dev/null 2>&1; then
        echo -e "  ✅ Vue.js app: ${GREEN}responding${NC}"
    else
        echo -e "  ❌ Vue.js app: ${RED}not responding${NC}"
    fi
}

# Start services
cmd_start() {
    require_root
    log "Starting kiosk services..."
    
    systemctl start kioskbook-app
    systemctl start lightdm
    
    log_success "Kiosk services started"
}

# Stop services
cmd_stop() {
    require_root
    log "Stopping kiosk services..."
    
    systemctl stop lightdm
    systemctl stop kioskbook-app
    
    log_success "Kiosk services stopped"
}

# Restart services
cmd_restart() {
    require_root
    log "Restarting kiosk services..."
    
    systemctl restart kioskbook-app
    systemctl restart lightdm
    
    log_success "Kiosk services restarted"
}

# Safe reboot
cmd_reboot() {
    require_root
    log "Rebooting system safely..."
    
    # Stop services gracefully
    systemctl stop lightdm
    systemctl stop kioskbook-app
    
    # Sync filesystems
    sync
    
    # Reboot
    systemctl reboot
}

# Show logs
cmd_logs() {
    local follow=false
    local lines=50
    
    # Parse options
    while [[ $# -gt 0 ]]; do
        case $1 in
            -f|--follow)
                follow=true
                shift
                ;;
            -n|--lines)
                lines="$2"
                shift 2
                ;;
            *)
                break
                ;;
        esac
    done
    
    if [[ "$follow" == true ]]; then
        journalctl -u kioskbook-app -f
    else
        journalctl -u kioskbook-app -n "$lines" --no-pager
    fi
}

# Health check
cmd_health() {
    local detailed=false
    
    # Parse options
    while [[ $# -gt 0 ]]; do
        case $1 in
            --detailed)
                detailed=true
                shift
                ;;
            *)
                break
                ;;
        esac
    done
    
    echo -e "${CYAN}═══ KioskBook Health Check ═══${NC}\n"
    echo "Date: $(date)"
    echo
    
    # Basic health
    cmd_status
    
    if [[ "$detailed" == true ]]; then
        echo -e "${CYAN}Detailed Diagnostics:${NC}"
        
        # Memory usage by process
        echo "Top memory consumers:"
        ps aux --sort=-%mem | head -6
        echo
        
        # Disk usage
        echo "Disk usage by directory:"
        du -sh /var/log /opt /home /tmp 2>/dev/null || true
        echo
        
        # Recent errors in logs
        echo "Recent errors (last 24h):"
        journalctl --since "24 hours ago" --priority=err --no-pager | tail -5 || echo "No recent errors"
        echo
        
        # Network diagnostics
        echo "Network interfaces:"
        ip addr show | grep -E "(inet |state)"
        echo
    fi
}

# Update Vue.js application only
cmd_update() {
    require_root
    log "Updating Vue.js application..."
    
    if [[ -d "$APP_DIR" ]]; then
        cd "$APP_DIR"
        
        # Check if it's a git repository
        if [[ -d .git ]]; then
            log "Pulling latest application code..."
            git pull
            
            # Update dependencies
            npm ci
            
            # Try to build if build script exists
            if npm run build 2>/dev/null; then
                log "Application built successfully"
            else
                log_warning "No build script found, using development mode"
            fi
            
            # Restart application service
            systemctl restart kioskbook-app
            
            log_success "Application updated and restarted"
        else
            log_error "Application directory is not a git repository"
        fi
    else
        log_error "Application directory not found: $APP_DIR"
    fi
}

# Upgrade entire KioskBook system
cmd_upgrade() {
    require_root
    log "Upgrading KioskBook system..."
    
    # Update Debian packages first
    log "Updating Debian package lists..."
    apt-get update
    
    log "Upgrading Debian packages..."
    DEBIAN_FRONTEND=noninteractive apt-get upgrade -y
    
    # Check for distribution upgrades (like Debian 13 -> 14)
    if command -v do-release-upgrade >/dev/null; then
        log "Checking for distribution upgrades..."
        do-release-upgrade -c || log_warning "No distribution upgrades available"
    fi
    
    # Clean up packages
    apt-get autoremove -y
    apt-get autoclean
    
    # Update KioskBook system components
    if [[ -d "/root/kioskbook/.git" ]]; then
        cd /root/kioskbook
        
        log "Pulling latest KioskBook system updates..."
        git pull
        
        log "Applying KioskBook system upgrades..."
        ./update.sh
        
        log_success "KioskBook system fully upgraded"
    else
        log_warning "KioskBook git repository not found at /root/kioskbook"
        log_success "Debian system upgraded successfully"
    fi
}

# Maintenance tasks
cmd_maintenance() {
    require_root
    log "Running maintenance tasks..."
    
    # Log cleanup
    journalctl --vacuum-time=7d
    find /var/log -name "*.log.*" -mtime +7 -delete 2>/dev/null || true
    
    # Package cleanup
    apt-get autoremove -y
    apt-get autoclean
    
    # Clear temporary files
    find /tmp -type f -mtime +1 -delete 2>/dev/null || true
    
    # Font cache refresh
    fc-cache -fv >/dev/null
    
    # System file cleanup
    if [[ -d "$LOG_DIR" ]]; then
        find "$LOG_DIR" -name "*.log" -size +100M -exec truncate -s 50M {} \;
    fi
    
    log_success "Maintenance completed"
}

# Schedule management
cmd_schedule() {
    local action="list"
    
    # Parse options
    while [[ $# -gt 0 ]]; do
        case $1 in
            --list)
                action="list"
                shift
                ;;
            --enable-downtime)
                action="enable_downtime"
                shift
                ;;
            --disable-downtime)
                action="disable_downtime"
                shift
                ;;
            *)
                break
                ;;
        esac
    done
    
    case "$action" in
        list)
            echo -e "${CYAN}Scheduled Tasks:${NC}"
            crontab -l 2>/dev/null || echo "No scheduled tasks"
            ;;
        enable_downtime)
            require_root
            log "Enabling downtime mode (11pm-7am)..."
            # Implementation would go here
            log_success "Downtime mode enabled"
            ;;
        disable_downtime)
            require_root
            log "Disabling downtime mode..."
            # Implementation would go here
            log_success "Downtime mode disabled"
            ;;
    esac
}

# Real-time monitoring
cmd_monitor() {
    echo -e "${CYAN}KioskBook Real-time Monitor${NC}"
    echo "Press Ctrl+C to exit"
    echo
    
    while true; do
        clear
        echo -e "${CYAN}═══ Real-time Monitor ═══${NC} $(date)"
        echo
        
        # CPU and Memory
        echo -e "${CYAN}Resources:${NC}"
        echo "  CPU: $(cat /proc/loadavg | awk '{print $1}')"
        echo "  Memory: $(free | awk '/^Mem:/ {printf "%.1f%%", $3/$2*100}')"
        echo "  Disk: $(df / | awk 'NR==2 {print $5}')"
        echo
        
        # Services
        echo -e "${CYAN}Services:${NC}"
        systemctl is-active kioskbook-app lightdm ssh | while read status; do
            if [[ "$status" == "active" ]]; then
                echo -e "  ✅ ${GREEN}$status${NC}"
            else
                echo -e "  ❌ ${RED}$status${NC}"
            fi
        done
        
        sleep 5
    done
}

# Configuration management
cmd_config() {
    echo -e "${CYAN}KioskBook Configuration:${NC}"
    echo
    echo "Application directory: $APP_DIR"
    echo "Log directory: $LOG_DIR"
    echo "Kiosk user: $KIOSK_USER"
    echo
    echo "Service status:"
    systemctl status kioskbook-app --no-pager -l
}

# Main command dispatcher
main() {
    if [[ $# -eq 0 ]]; then
        show_help
        exit 0
    fi
    
    local command="$1"
    shift
    
    case "$command" in
        status)
            cmd_status "$@"
            ;;
        start)
            cmd_start "$@"
            ;;
        stop)
            cmd_stop "$@"
            ;;
        restart)
            cmd_restart "$@"
            ;;
        reboot)
            cmd_reboot "$@"
            ;;
        logs)
            cmd_logs "$@"
            ;;
        health)
            cmd_health "$@"
            ;;
        update)
            cmd_update "$@"
            ;;
        upgrade)
            cmd_upgrade "$@"
            ;;
        maintenance)
            cmd_maintenance "$@"
            ;;
        schedule)
            cmd_schedule "$@"
            ;;
        monitor)
            cmd_monitor "$@"
            ;;
        config)
            cmd_config "$@"
            ;;
        help|--help|-h)
            show_help
            ;;
        *)
            log_error "Unknown command: $command"
            echo
            show_help
            exit 1
            ;;
    esac
}

# Run
main "$@"